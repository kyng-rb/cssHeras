Pseudo-class -> These are selector that works in real time to some events onside a element, it's nomenclature is element two points(:) Pseudo-class,
there are exists several, in this note i am going to take the dynamics, they are Active, Link, Visited, Hover, Focus

Active - Link - Visited -> They are elements that work only when the element is a link(a tag) and there are rarely used.
1 - Link -> Put styles to links that have not yet been visited(default)
2 - Active -> Put styles to link when we click down (and not click up) to a link (usually use fot simulate interactions with a button/link like
scale, change color, etc)
3 - Visited -> Put styles to the already visited links

Hover -> This works onside any element and works when we put the cursor onside a element and persist in there, when we move the cursor
from there the Pseudo-class is removed with their styles.

Focus -> This apply styles on any element that has the focus of the screen, also take in account that when we loses the focus, the
Pseudo-class is removed

Target -> This apply styles to the single element that is redirected by a link using anchors (an anchor is a way to redirect the viewport
to a specific element using links and putting id to them)

for example
<a ref:"#mytext">
many many text ...
p id="mytext"

The above example is going to select the p after click the a tag

Structural Pseudo-class

This allows apply styles to elements taking in account the structure of the dom

first-child, last-child, nth-child() -> All of them are Pseudo-Class that apply styles to a element that has sibling brothers
with the same selector (can be a class or a tag), for example several `li` elements inside a ul.

first-child -> take the first element of the sibling structure
last-child -> take the last elements
nth-child() -> This accept several parameters and apply styles to the siblings that reach that. posible values
 even - Take the par elements
 odd -> Take the impar
 int -> Take an specific element based on its indice
 formule -> We can introduce formule to it, taking in account that n works like an current element in a loop
nth-last-child -> Works like nth child but its calculations begin from the last element 
only-child -> Take the element selected when it is alone (no siblings), not works when has siblings without care the tag or class

Types -> It allows us apply styles to a selector between siblings with the same type of selector, for example a div container with 
several h3 and p tags, we can apply styles to the first p and ignore all the h3 before it, have the exactly same methods
of the child but with the 'of-type' in place of 'child'

first-of-type, last-of-type, nth-of-type, nth-last-of-type and only-type

Not -> It allows us apply styles to all the elements catched for a selector without a condition, also can bee seen like a 
ignore to a element that reach certain condition, for exapmle apply styles to all the div without class text
    div:not(.text) { ... }
the parentesis accept any selector, pseudoclass and pseudoelement